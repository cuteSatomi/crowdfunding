<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
             http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
             http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
             http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置自动扫描的包：为了把Service扫描进IOC容器 -->
    <context:component-scan base-package="com.zzx.crowd.service"/>

    <!-- 配置事务管理器 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 装配数据源 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置事务切面 -->
    <aop:config>
        <!-- public String com.zzx.crowd.service.AdminService.saveAdmin(Admin admin)
            权限修饰符和返回值可以用一个*代替  =>  * com.zzx.crowd.service.AdminService.saveAdmin(Admin admin)
            包名可以用*表示任意包            =>  * *.*.*.*.AdminService.saveAdmin(Admin admin)
            用*..可以表示任意层级的包        =>  * *..AdminService.saveAdmin(Admin admin)
            接口或者类以Service结尾就可以    =>  * *..*Service.saveAdmin(Admin admin)
            用*表示任意方法                 =>  * *..*Service.*(Admin admin)
            用..表示任意参数                =>  * *..*Service.*(..)
        -->
        <!-- 由于SpringSecurity中有一个叫UserDetailsService的类，避免将其扫描到加入事务，所以将切入点表达式定位到Impl -->
        <aop:pointcut id="txPointcut" expression="execution(* *..*ServiceImpl.*(..))"/>

        <!-- 将切入点表达式和事务通知关联 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

    <!-- 配置事务通知 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!-- 配置事务的属性 -->
        <tx:attributes>
            <!-- 查询方法：配置只读属性，让数据库知道这是查询操作，能够进行一定优化 -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="list*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>

            <!-- 增删改方法：需要设置事务传播行为，回滚异常 -->
            <!--
                propagation属性：
                    REQUIRED：       默认值，表示当前方法必须工作在事务中，如果当前线程上没有已经开启的事务，则自己开启事务。如果已经存在事务，就使用已有事务。
                        顾虑：使用别人的事务可能会“被”回滚。
                    REQUIRES_NEW:    建议使用的值，表示不管当前线程是否有事务，都使用自己创建的事务。
                        好处：不会受其他事务回滚的影响。
            -->
            <!--
                rollback-for属性：配置事务方法针对什么样的异常回滚
                    默认：运行时异常回滚
                    建议：编译时异常和运行时异常都回滚
            -->
            <tx:method name="save*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <!-- batch：批量操作 -->
            <tx:method name="batch*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置BCryptPasswordEncoder -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

</beans>